# Generated by Django 2.0.5 on 2018-07-09 23:27

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import permits.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ApplicantInformation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=20)),
                ('last_name', models.CharField(max_length=20)),
                ('agent_for', models.CharField(blank=True, help_text='Organization or person being represented for this application', max_length=100, null=True)),
                ('applicant_address', models.CharField(blank=True, help_text='Address of applicant or agent if different from project address', max_length=50, null=True)),
                ('applicant_city', models.CharField(blank=True, max_length=50, null=True)),
                ('applicant_zip', models.CharField(blank=True, max_length=7, null=True)),
                ('applicant_phone', models.CharField(blank=True, help_text='Phone number (digits only): 5551234567', max_length=10, null=True)),
                ('last_modified', models.DateField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Application',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Approval',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(auto_now=True)),
                ('application', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='permits.Application')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Franchise',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('permit_number', models.CharField(blank=True, max_length=20, null=True)),
                ('contact', models.CharField(blank=True, help_text='Person or organization responsible for maintenance of the     item to be franchised.', max_length=100, null=True)),
                ('contact_phone', models.CharField(blank=True, help_text='Contact number for questions about maintenance of the     item to be franchised.', max_length=10, null=True)),
                ('contact_email', models.EmailField(blank=True, help_text='Email address for a person or organization responsible for the     maintenance of the item to be franchised.', max_length=254, null=True)),
                ('reason', models.TextField(help_text='Please explain the need for a     right of way franchise permit.')),
                ('drawings', models.FileField(help_text='Drawings must     be show the dimensions and location of the item to be franchised. Surveys,     blueprints, plans, or other dimensioned graphics are acceptable.', upload_to=permits.models.franchise_file_path)),
                ('last_modified', models.DateField(auto_now=True)),
                ('applicant_info', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='permits.ApplicantInformation')),
            ],
        ),
        migrations.CreateModel(
            name='Grading',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('permit_number', models.CharField(blank=True, max_length=20, null=True)),
                ('grading_plan', models.FileField(blank=True, help_text='    Provide a PDF of the grading and drainage plans.', null=True, upload_to=permits.models.grading_file_path)),
                ('threshold_condition', models.CharField(choices=[('SFHA', 'Project is located within the special flood                         hazard area'), ('vertical', 'Ten or more vertical feet                         will be cut or filled'), ('volume', 'Cut or fill will exceed 1000 cubic yards'), ('trees', 'Seven or more trees will be removed')], max_length=10)),
                ('construction_start', models.DateField()),
                ('construction_end', models.DateField()),
                ('disturbed_area', models.FloatField(help_text='acres')),
                ('soil_loss_pre', models.FloatField(help_text='tons per acre')),
                ('soil_loss_post', models.FloatField(help_text='tons per acre')),
                ('max_depth_of_fill', models.FloatField(blank=True, help_text='feet', null=True)),
                ('volume_of_fill', models.FloatField(blank=True, help_text='cubic yards', null=True)),
                ('haul_in', models.FloatField(blank=True, help_text='cubic yards of material to be     hauled in excluding gravel and asphalt', null=True)),
                ('source_of_haul_material', models.CharField(blank=True, help_text='location of fill to be brought in', max_length=100, null=True)),
                ('haul_out', models.FloatField(help_text='cubic yards of material to be     hauled off the project site')),
                ('destination_of_haul_material', models.CharField(blank=True, help_text='destination of material taken from the project site', max_length=100, null=True)),
                ('tracking_pads', models.TextField(help_text='approximate location of tracking     pads to prevent soil loss onto city streets')),
                ('haul_route', models.TextField(help_text='route haul trucks will take to     access the project site')),
                ('last_modified', models.DateField(auto_now=True)),
                ('applicant_info', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='permits.ApplicantInformation')),
            ],
        ),
        migrations.CreateModel(
            name='Permit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('flat_fee', models.BooleanField()),
                ('permit_fee', models.FloatField(blank=True, null=True)),
                ('required_approvals', models.ManyToManyField(to='permits.Department')),
            ],
        ),
        migrations.CreateModel(
            name='ProjectInformation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('project_address', models.CharField(blank=True, max_length=50, null=True)),
                ('project_city', models.CharField(max_length=50)),
                ('project_zip', models.CharField(max_length=7)),
                ('parcel_id', models.CharField(blank=True, help_text='Please     provide the county parcel id number if addressing is not available', max_length=20, null=True)),
                ('zoning', models.CharField(choices=[('DOD', 'DOD - design overlay district'), ('O-3', 'O-3 - general office district'), ('PR', 'PR - Park and recreation district'), ('R-2', 'R-2 - single-family district'), ('I-2', 'I-2 - light industrial district'), ('R-1', 'R-1 - single-family district'), ('MF-12', 'MF-12 - multifamily district'), ('C-4', 'C-4 - open display commercial district'), ('PRD', 'PRD - planned residential district'), ('I-1', 'I-1 - industrial park district'), ('O-1', 'O-1 - quiet office district'), ('PID', 'PID - planned industrial district'), ('C-1', 'C-1 - neighborhood commercial district'), ('M', 'M - mining district'), ('FP', 'FP - floodplain district'), ('MF-24', 'MF-24 - multifamily district'), ('R-5', 'R-5 - urban residence district'), ('R-4', 'R-4 - two-family district'), ('O-2', 'O-2 - office and institutional district'), ('MF-18', 'MF-18 - multifamily district'), ('R-4A', 'R-4A - low density residential district'), ('MF-6', 'MF-6 - multifamily district'), ('UU', 'UU - urban use district.'), ('R-7A', 'R-7A - manufactured home district'), ('R-7', 'R-7 - manufactured home park district'), ('PD', 'PD - industrial district'), ('POD', 'POD - planned office district'), ('C-2', 'C-2 - shopping center district'), ('C-3', 'C-3 - general commercial district'), ('AF', 'AF - agriculture and forestry district'), ('OS', 'OS - open space district'), ('PCD', 'PCD - planned commercial district'), ('R-3', 'R-3 - single-family district'), ('R-6', 'R-6 - high-rise apartment district'), ('I-3', 'I-3 - heavy industrial district')], max_length=20)),
                ('engineer_of_record', models.CharField(blank=True, max_length=100, null=True)),
                ('project_owner', models.CharField(help_text='Person, business     or organization with ownership of the project', max_length=50)),
                ('project_description', models.TextField(help_text='A brief summary of the     project scope')),
                ('last_modified', models.DateField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='ReviewComment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment', models.TextField()),
                ('date', models.DateField(auto_now=True)),
                ('acknowledge', models.BooleanField(default=True, help_text='Applicant must acknowledge comment')),
                ('respond', models.BooleanField(default=False, help_text='Applicant must provide a written response')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SFHA',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('permit_number', models.CharField(blank=True, max_length=20, null=True)),
                ('site_plan', models.FileField(blank=True, help_text='    Provide a PDF of the survey or site plans for the project.', null=True, upload_to=permits.models.sfha_file_path)),
                ('elevation_certificate', models.FileField(blank=True, help_text='    Provide an elevation certificate stamped by a professional land surveyor', null=True, upload_to=permits.models.sfha_file_path)),
                ('flood_proofing', models.FileField(blank=True, help_text='    Provide a flood-proofing certificate.', null=True, upload_to=permits.models.sfha_file_path)),
                ('no_rise_certificate', models.FileField(blank=True, help_text="    Provide an engineer's certificate of no-rise within the floodway.", null=True, upload_to=permits.models.sfha_file_path)),
                ('last_modified', models.DateField(auto_now=True)),
                ('applicant_info', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='permits.ApplicantInformation')),
                ('project_info', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='permits.ProjectInformation')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='StockComment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20)),
                ('comment', models.TextField()),
                ('default', models.BooleanField(help_text='This comment will appear in all new reviews')),
                ('acknowledge', models.BooleanField(default=True, help_text='Applicant must acknowledge comment')),
                ('respond', models.BooleanField(default=False, help_text='Applicant must provide a written response')),
                ('last_modified', models.DateField(auto_now=True)),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='permits.Department')),
                ('permit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='permits.Permit')),
            ],
        ),
        migrations.CreateModel(
            name='UserDepartment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('department', models.ManyToManyField(to='permits.Department')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='grading',
            name='project_info',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='permits.ProjectInformation'),
        ),
        migrations.AddField(
            model_name='grading',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='franchise',
            name='project_info',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='permits.ProjectInformation'),
        ),
        migrations.AddField(
            model_name='franchise',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='application',
            name='SFHA_permit',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='permits.SFHA'),
        ),
        migrations.AddField(
            model_name='application',
            name='franchise_permit',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='permits.Franchise'),
        ),
        migrations.AddField(
            model_name='application',
            name='grading_permit',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='permits.Grading'),
        ),
    ]
